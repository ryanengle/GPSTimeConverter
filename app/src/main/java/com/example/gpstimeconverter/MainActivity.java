package com.example.gpstimeconverter;

import android.util.Log;

import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import static java.text.DateFormat.getDateInstance;

public class MainActivity extends AppCompatActivity {

    RadioGroup rgGpsEpochYear;
    EditText edTxtGpsWeek;
    EditText edTxtGpsSeconds;
    Button butCalculate;
    TextView txtViewResult;
    GpsConverter myConverter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // R.layout.activity_main is generated by android studio
        setContentView(R.layout.activity_main);

        rgGpsEpochYear = findViewById(R.id.rgEpochYears);
        edTxtGpsWeek = findViewById(R.id.edTxtGpsWeek);
        edTxtGpsSeconds = findViewById(R.id.edTxtGpsSeconds);
        butCalculate = findViewById(R.id.butCalculate);
        txtViewResult = findViewById(R.id.txtViewResult);
        myConverter = new GpsConverter();

        butCalculate.setOnClickListener(v -> {

            // These are set at the instant when the button is clicked
            int epochYear = getGpsEpochYearFromGui();
            double gpsWeek = getGpsWeekFromGui();
            double gpsSeconds = getGpsSecondsFromGui();

            Log.d("CheckInput", String.valueOf(epochYear));
            Log.d("CheckInput", String.valueOf(gpsWeek));
            Log.d("CheckInput", String.valueOf(gpsSeconds));

            this.doConvertCalc(epochYear, gpsWeek, gpsSeconds);
        });
    }

    protected int getGpsEpochYearFromGui(){
        int rbId = this.rgGpsEpochYear.getCheckedRadioButtonId();
        RadioButton rbGpsEpochYear = findViewById(rbId);

        int rbEpochYear;
        try {
            rbEpochYear = Integer.parseInt(rbGpsEpochYear.getText().toString());
        } catch (Exception e) {
            rbEpochYear = 0;
        }
        return rbEpochYear;

    }

    protected double getGpsSecondsFromGui(){
        double gpsSeconds=0.0;
        try {
            gpsSeconds = Double.parseDouble(edTxtGpsSeconds.getText().toString());
        }
        catch (Exception e) {
            gpsSeconds = 0.0;
        }
        return gpsSeconds;
    }

    protected double getGpsWeekFromGui(){
        double gpsWeek=0.0;
        try {
            gpsWeek = Double.parseDouble(edTxtGpsWeek.getText().toString());
        }
        catch (Exception e) {
            gpsWeek = 0.0;
        }
        return gpsWeek;
    }

    protected void doConvertCalc(int epochYear, double gpsWeek, double gpsSeconds){
        //test_verifyEpochs();
        Calendar result = myConverter.calculate_utc_from_gps(epochYear, gpsWeek, gpsSeconds);

        String msg;

        try {
            final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ");
            final Date myDate = result.getTime();
            // TODO Show UTC rather than Local
            msg = format.format(myDate);

        } catch (Exception e) {
            msg = "Error calculating date & time";
        }
        txtViewResult.setText(msg);
    }


    private void test_verifyEpochs(){
        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ");
        final int[] validEpochs = {1980, 1999, 2019, 2038};

        Calendar myEpoch;
        for (int i = 0; i < validEpochs.length; i++){
            myEpoch = myConverter.getGpsEpoch(validEpochs[i]);
            try {
                Date myDate = myEpoch.getTime();
                String dateTime = format.format(myDate);

                Log.d("timeTest", dateTime);
                Log.d("timeTest", myEpoch.toString());
            }
            catch (Exception e) {
                String msg = "Invalid gps epoch specified: " + String.valueOf(validEpochs[i]);
                Log.d("timeTest", msg );
            }
        }

        myEpoch = myConverter.getGpsEpoch();
        try {
            Date myDate = myEpoch.getTime();
            String dateTime = format.format(myDate);

            Log.d("timeTest", dateTime);
            Log.d("timeTest", myEpoch.toString());
        }
        catch (Exception e) {
            String msg = "Invalid gps epoch specified: " + String.valueOf(myConverter.getEpochYear());
            Log.d("timeTest", msg );
        }

        /*
        //Date myEpoch = myConverter.getGpsEpoch1980();
        //Calendar myEpoch = myConverter.getGpsEpoch1980();
        myEpoch = myConverter.getGpsEpoch1980();
        Date myDate = myEpoch.getTime();
        //String dateTime = getDateInstance().format(myEpoch);
        //String dateTime = format.format(myEpoch);
        String dateTime = format.format(myDate);

        Log.d("timeTest", dateTime);
        Log.d("timeTest", myEpoch.toString());

        myEpoch = myConverter.getGpsEpoch1999();
        myDate = myEpoch.getTime();
        dateTime = format.format(myDate);

        Log.d("timeTest", dateTime);
        Log.d("timeTest", myEpoch.toString());

        myEpoch = myConverter.getGpsEpoch2019();
        myDate = myEpoch.getTime();
        dateTime = format.format(myDate);

        Log.d("timeTest", dateTime);
        Log.d("timeTest", myEpoch.toString());

        //Log.d("timeTest", format.format(myEpoch));
        */
    }
}